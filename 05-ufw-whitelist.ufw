#!/bin/bash

# This script is executed by /etc/ufw/after.init as part of the ufw startup process.
# It creates and manages the whitelist ipset and adds corresponding ACCEPT rules.
# This script should run early, e.g., with a '05-' prefix.

# Install this file executable as /etc/ufw/after.init.d/05-ufw-whitelist.ufw

# Reading the configuration file
if [ -f /etc/default/ufw-blocklist ]; then
    . /etc/default/ufw-blocklist
else
    echo "Error: Configuration file /etc/default/ufw-blocklist not found."
    exit 1
fi

# Specific logger tag for the whitelist script
UFBL_LOGGER="${UFBL_LOGGER_CMD} -t ${UFBL_WHITELIST_IPSET_NAME}"

# Check ipset exists and is executable
[ -x "$UFBL_IPSET_BIN" ] || {
    ${UFBL_LOGGER} -s "$UFBL_IPSET_BIN is not executable or not found. Cannot manage ipsets. Please install ipset."
    exit 1
    }

# Execute the appropriate action based on the argument passed by after.init
case "$1" in
start)
    # Check if the required variables got from the config
    if [ -z "$UFBL_WHITELIST_IPSET_NAME" ] || [ -z "$UFBL_WHITELIST_FILE" ]; then
        ${UFBL_LOGGER} -s "Error: Required whitelist variables (UFBL_WHITELIST_IPSET_NAME, UFBL_WHITELIST_FILE) not set in config."
        exit 1
    fi

    ${UFBL_LOGGER} "Starting ${UFBL_WHITELIST_IPSET_NAME} whitelist initialization."

    # Check if whitelist file exists and security check
    UFBL_FILE_OK=false

    if [ -f "$UFBL_WHITELIST_FILE" ]; then
        # File exists, check its current permissions and ownership
        if [ "$(stat -c %U:%G:%a "$UFBL_WHITELIST_FILE")" != "root:root:600" ]; then
            ${UFBL_LOGGER} "Critical Error: $UFBL_WHITELIST_FILE has insecure permissions ($(stat -c %U:%G:%a "$UFBL_WHITELIST_FILE")). Expected root:root 600. Cannot initialize whitelist ipset from file."
            echo "Whitelist file has insecure permissions, whitelist ipset will not be initialized from file."
        else
             ${UFBL_LOGGER} "Whitelist file $UFBL_WHITELIST_FILE exists and has correct root:root 600 permissions."
             UFBL_FILE_OK=true
        fi
    else
        # File does not exist. Log a warning and proceed, the ipset will be empty
    	${UFBL_LOGGER} "Warning: Whitelist file $UFBL_WHITELIST_FILE does not exist. Cannot initialize whitelist ipset from file. It will be empty."
        echo "Whitelist file missing, whitelist ipset will not be initialized from file."
    fi


    # Create or refresh the whitelist ipset
    # Use -exist to avoid errors if the set already exists (e.g., after ufw restart)
    # Determine maxelem based on whether the file was OK to use
    if [ "$UFBL_FILE_OK" = true ]; then
         # Count the number of entries in the blocklist seed list
         # Use the refined regex from the config file to count only valid entries
         UFBL_WHITELIST_COUNT=$(egrep -c "${UFBL_CIDR_REGEX}" "$UFBL_WHITELIST_FILE")
         UFBL_WHITELIST_MAX_ELEM=$(expr $UFBL_WHITELIST_COUNT + $UFBL_WHITELIST_MAXELEM_HEADROOM)
         ${UFBL_LOGGER} "Calculated maxelem for ipset based on whitelist file: ${UFBL_WHITELIST_MAX_ELEM}"
    else
         # File was not OK (missing or bad permissions), create an empty set with default headroom
         UFBL_WHITELIST_COUNT=0
         UFBL_WHITELIST_MAX_ELEM=$UFBL_WHITELIST_MAXELEM_HEADROOM
         ${UFBL_LOGGER} "Using default maxelem for ipset as whitelist file was not available/secure: ${UFBL_WHITELIST_MAX_ELEM}"
    fi

    # Create or refresh the whitelist ipset
    if ! "${UFBL_IPSET_BIN}" create "$UFBL_WHITELIST_IPSET_NAME" hash:net -exist maxelem "$UFBL_WHITELIST_MAX_ELEM"; then
        ${UFBL_LOGGER} -s "Failed to create or refresh whitelist ipset '$UFBL_WHITELIST_IPSET_NAME'. Exiting."
        exit 1
    fi
    # Flush existing entries if the set was just created or existed
    if ! "${UFBL_IPSET_BIN}" flush "$UFBL_WHITELIST_IPSET_NAME"; then
         ${UFBL_LOGGER} -s "Failed to flush whitelist ipset '$UFBL_WHITELIST_IPSET_NAME'. Exiting."
         exit 1
    fi

    # Add entries from the whitelist file to the whitelist ipset
    # This block only runs if the file was OK to use AND had entries
    if [ "$UFBL_FILE_OK" = true ] && [ "$UFBL_WHITELIST_COUNT" -gt 0 ]; then
        ${UFBL_LOGGER} "Adding entries from $UFBL_WHITELIST_FILE to $UFBL_WHITELIST_IPSET_NAME."
        # Run in background
        (
            egrep -o "${UFBL_CIDR_REGEX}" "$UFBL_WHITELIST_FILE" |\
            while read UFBL_ENTRY
                do
                    "${UFBL_IPSET_BIN}" add "$UFBL_WHITELIST_IPSET_NAME" "$UFBL_ENTRY" 2>/dev/null || {
                        ${UFBL_LOGGER} "Warning: Failed to add '$UFBL_ENTRY' from whitelist file to ipset '$UFBL_WHITELIST_IPSET_NAME'."
                    }
                done
            ${UFBL_LOGGER} "Finished adding entries from $UFBL_WHITELIST_FILE to $UFBL_WHITELIST_IPSET_NAME."
        ) < /dev/null &> /dev/null & disown -h
    else
         ${UFBL_LOGGER} "Whitelist file $UFBL_WHITELIST_FILE was not found, had insecure permissions, or was empty. No entries added to ipset from file."
    fi


    # --- IPTables Rules Setup for Whitelist ---
    # Add whitelist rules *before* any blocklist rules.
    # These rules explicitly ACCEPT traffic from whitelisted IPs/CIDRs.
    # Insert into ufw-user-* chains for high precedence within UFW's structure.
    # ONLY add rules if the ipset was successfully created.
    if ufbl_set_exists "$UFBL_WHITELIST_IPSET_NAME"; then

        # Accept inbound from whitelist
        if ufbl_chain_exists ufw-user-input; then
            iptables -D ufw-user-input -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT || true # Remove if exists
            iptables -I ufw-user-input -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT -m comment --comment "ufw-whitelist-input ${UFBL_WHITELIST_IPSET_NAME}"
        else
             ${UFBL_LOGGER} "Warning: ufw-user-input chain not found. Cannot insert whitelist rule with high precedence. Falling back to INPUT chain."
             # Fallback: Insert into INPUT chain, but precedence might be lower
             iptables -D INPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT || true # Remove if exists
             iptables -I INPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT -m comment --comment "ufw-whitelist-input ${UFBL_WHITELIST_IPSET_NAME} (fallback)"
        fi

        # Accept outbound to whitelist
        if ufbl_chain_exists ufw-user-output; then
            iptables -D ufw-user-output -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT || true # Remove if exists
            iptables -I ufw-user-output -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT -m comment --comment "ufw-whitelist-output ${UFBL_WHITELIST_IPSET_NAME}"
        else
            ${UFBL_LOGGER} "Warning: ufw-user-output chain not found. Cannot insert whitelist rule with high precedence. Falling back to OUTPUT chain."
            # Fallback: Insert into OUTPUT chain
            iptables -D OUTPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT || true # Remove if exists
            iptables -I OUTPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT -m comment --comment "ufw-whitelist-output ${UFBL_WHITELIST_IPSET_NAME} (fallback)"
        fi

        # Accept forwarding to/from whitelist (if applicable)
        if ufbl_chain_exists ufw-user-forward; then
            iptables -D ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT || true # Remove if exists
            iptables -I ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT -m comment --comment "ufw-whitelist-forward-src ${UFBL_WHITELIST_IPSET_NAME}"
            iptables -D ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT || true # Remove if exists
            iptables -I ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT -m comment --comment "ufw-whitelist-forward-dst ${UFBL_WHITELIST_IPSET_NAME}"
        else
             ${UFBL_LOGGER} "Warning: ufw-user-forward chain not found. Cannot insert whitelist rule with high precedence. Falling back to FORWARD chain."
             # Fallback: Insert into FORWARD chain
             iptables -D FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT || true # Remove if exists
             iptables -I FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT -m comment --comment "ufw-whitelist-forward-src ${UFBL_WHITELIST_IPSET_NAME} (fallback)"
             iptables -D FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT || true # Remove if exists
             iptables -I FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT -m comment --comment "ufw-whitelist-forward-dst ${UFBL_WHITELIST_IPSET_NAME} (fallback)"
        fi
        ${UFBL_LOGGER} "Finished ${UFBL_WHITELIST_IPSET_NAME} whitelist initialization (rules added)."
    else
        ${UFBL_LOGGER} "Skipping IPTables rules setup for ${UFBL_WHITELIST_IPSET_NAME} as ipset was not created."
        echo "Skipping IPTables rules setup for ${UFBL_WHITELIST_IPSET_NAME} as ipset was not created."
    fi

    ${UFBL_LOGGER} "Finished ${UFBL_WHITELIST_IPSET_NAME} whitelist initialization process."
    ;;

stop)
    ${UFBL_LOGGER} "Stopping ${UFBL_WHITELIST_IPSET_NAME} whitelist."
    # Delete whitelist resources
    # Only attempt to remove rules and destroy set if the set exists
    if ufbl_set_exists "$UFBL_WHITELIST_IPSET_NAME"; then
        iptables -D ufw-user-input -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT 2>/dev/null || true
        iptables -D INPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT 2>/dev/null || true

        iptables -D ufw-user-output -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT 2>/dev/null || true
        iptables -D OUTPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT 2>/dev/null || true

        iptables -D ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src 2>/dev/null || true
        iptables -D FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT 2>/dev/null || true
        iptables -D ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst 2>/dev/null || true
        iptables -D FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT 2>/dev/null || true

	    "${UFBL_IPSET_BIN}" flush   "$UFBL_WHITELIST_IPSET_NAME" || ${UFBL_LOGGER} "Warning: Failed to flush whitelist ipset '$UFBL_WHITELIST_IPSET_NAME' during stop."
	    "${UFBL_IPSET_BIN}" destroy "$UFBL_WHITELIST_IPSET_NAME" || ${UFBL_LOGGER} "Warning: Failed to destroy whitelist ipset '$UFBL_WHITELIST_IPSET_NAME' during stop."
        ${UFBL_LOGGER} "Finished stopping ${UFBL_WHITELIST_IPSET_NAME} whitelist (resources removed)."
    else
        ${UFBL_LOGGER} "Whitelist ipset '${UFBL_WHITELIST_IPSET_NAME}' does not exist. Nothing to stop."
    fi
    ;;
status)
    ${UFBL_LOGGER} "Getting status for ${UFBL_WHITELIST_IPSET_NAME} whitelist."
    # Display details of the whitelist ipset if it exists
    if ufbl_set_exists "$UFBL_WHITELIST_IPSET_NAME"; then
        echo "--- Whitelist Status (${UFBL_WHITELIST_IPSET_NAME}) ---"
        "${UFBL_IPSET_BIN}" list "$UFBL_WHITELIST_IPSET_NAME" -t
        echo "Whitelist file: $UFBL_WHITELIST_FILE"
        if [ -f "$UFBL_WHITELIST_FILE" ]; then
            echo "Entries in whitelist file: $(egrep -c "${UFBL_CIDR_REGEX}" "$UFBL_WHITELIST_FILE")"
        else
             echo "Whitelist file not found."
        fi
    else
        echo "Whitelist ipset '${UFBL_WHITELIST_IPSET_NAME}' does not exist."
        echo "Whitelist file: $UFBL_WHITELIST_FILE"
        if [ ! -f "$UFBL_WHITELIST_FILE" ]; then
             echo "Whitelist file not found."
        fi
    fi

    echo "" # Add a blank line for separation

    # Show iptables rules related to the whitelist
    # Only attempt to list rules if the set exists (to avoid iptables errors)
    if ufbl_set_exists "$UFBL_WHITELIST_IPSET_NAME"; then
        echo "--- IPTables Rules Status (Whitelist) ---"
        iptables -L -nvx | grep "$UFBL_WHITELIST_IPSET_NAME" | grep 'set --match-set'
    else
        echo "IPTables rules for '${UFBL_WHITELIST_IPSET_NAME}' ipset not found (ipset does not exist)."
    fi

    echo "" # Add a blank line for separation

    # Show the last 10 lines from the logs related to the whitelist
    echo "--- Recent Logs (Whitelist) ---"
    journalctl -t "${UFBL_WHITELIST_IPSET_NAME}" | tail -n 10
    ;;
flush-all)
    ${UFBL_LOGGER} "Flushing ${UFBL_WHITELIST_IPSET_NAME} whitelist entries and resetting iptables counters."

    # Flush whitelist set entries if it exists
    if ufbl_set_exists "$UFBL_WHITELIST_IPSET_NAME"; then
        "${UFBL_IPSET_BIN}" flush  "$UFBL_WHITELIST_IPSET_NAME" || ${UFBL_LOGGER} "Warning: Failed to flush whitelist ipset '$UFBL_WHITELIST_IPSET_NAME' during flush-all."

        # Reset iptables accounting for rules related to the whitelist
        # Note: This assumes the comments added during 'start' are unique and stable.
        # Only reset if the set exists (to avoid iptables errors)
        # Reset INPUT chain counters for whitelist rules
        iptables -Z ufw-user-input -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src 2>/dev/null || true
        iptables -Z INPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT 2>/dev/null || true # Fallback rule

        # Reset OUTPUT chain counters for whitelist rules
        iptables -Z ufw-user-output -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst 2>/dev/null || true
        iptables -Z OUTPUT -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT 2>/dev/null || true # Fallback rule

        # Reset FORWARD chain counters for whitelist rules
        iptables -Z ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src 2>/dev/null || true
        iptables -Z FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" src -j ACCEPT 2>/dev/null || true # Fallback rule
        iptables -Z ufw-user-forward -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst 2>/dev/null || true
        iptables -Z FORWARD -m set --match-set "$UFBL_WHITELIST_IPSET_NAME" dst -j ACCEPT 2>/dev/null || true # Fallback rule

        ${UFBL_LOGGER} "Finished flushing ${UFBL_WHITELIST_IPSET_NAME} whitelist (entries flushed, counters reset)."
    else
        echo "Whitelist ipset '${UFBL_WHITELIST_IPSET_NAME}' does not exist. Nothing to flush."
    fi
    ;;
*)
    # This case should ideally not be reached if called by the main after.init script
    ${UFBL_LOGGER} -s "Unsupported action '$1' passed to ${0}. Usage: {start|stop|flush-all|status}"
    exit 1
    ;;
esac

exit 0
